@using SurveyConfiguratorApp.Domain.Questions
@using SurveyConfiguratorWeb.Languages
@using SurveyConfiguratorWeb.Models
@{ ViewBag.Title = "Create"; }



<div class="shadow-lg border p-2 rounded-2 my-3 my-md-5 bg-white">
    <div class="my-3 row p-1 p-md-2">
        <h2>@Language.CREATE</h2>
        <div class="input-group mb-3 col-12">
            <label class="input-group-text side-form-label" for="questionTypes">@Language.QUESTION_TYPE</label>

            <select class="form-select" id="questionTypes">
                <option selected disabled>@(Language.CHOOSE)...</option>
                @foreach (Question.QuestionTypes type in Enum.GetValues(typeof(Question.QuestionTypes)))
                {
                    switch (type)
                    {
                        case Question.QuestionTypes.FACES:
                            <option value="@type">@Language.FACES</option>
                            break;
                        case Question.QuestionTypes.SLIDER:
                            <option value="@type">@Language.SLIDER</option>
                            break;
                        case Question.QuestionTypes.STARS:
                            <option value="@type">@Language.STARS</option>
                            break;
                        default:
                            break;
                    }

                }

            </select>
        </div>
        @{ QuestionFaces tQuestionFaces = Model is QuestionFaces ? Model : new QuestionFaces();
            QuestionStars tQuestionStars = Model is QuestionStars ? Model : new QuestionStars();
            QuestionSlider tQuestionSlider = Model is QuestionSlider ? Model : new QuestionSlider();

            Question tQuestion = Model is Question ? Model : new Question(); }

        @using (Html.BeginForm(Routes.CREATE, Routes.QUESTION, FormMethod.Post, new { @novalidate = "novalidate" }))
        {
    <div class="mb-3 py-2">
      
        <input type="string" name="TypeName" value=""  hidden id="TypeName"/>
        @Html.Partial(Routes.PATH_QUESTION_CRAETE_FILE, tQuestion)
        <div id="questionFacesPartial" style="display: none" data-view-type="faces">
            @Html.Partial(Routes.PATH_QUESTION_FACES_CRAETE_FILE, tQuestionFaces)
        </div>

        <div id="questionStarsPartial" style="display: none" data-view-type="stars">
            @Html.Partial(Routes.PATH_QUESTION_STARS_CRAETE_FILE, tQuestionStars)
        </div>
        <div id="questionSliderPartial" style="display: none" data-view-type="slider">
            @Html.Partial(Routes.PATH_QUESTION_SLIDER_CRAETE_FILE, tQuestionSlider)
        </div>

    </div>
           
        }

        </div>
</div>









@section scripts {
    <script src="~/Scripts/Question/QuestionValidation.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const TypeNameHidden = document.getElementById("TypeName");
            var selectElement = document.getElementById('questionTypes');
            var questionFacesPartial = document.getElementById('questionFacesPartial');
            var questionStarsPartial = document.getElementById('questionStarsPartial');
            var questionSliderPartial = document.getElementById('questionSliderPartial');
            let questionType = "@tQuestion.TypeName";


            const SelectQuestionTypeView = (questionType) => {
                const options = selectElement.options;
                for (let i = 0; i < options.length; i++) {
                    if (options[i].value === questionType) {
                        options[i].selected = true;
                        break;
                    }
                }
            }
            const ChangeSelectedView = (selectedValue) => {
                SelectQuestionTypeView(selectedValue);
                    switch (selectedValue) {
                    case "@Question.QuestionTypes.FACES":
                            questionFacesPartial.style.display = 'block';
                                TypeNameHidden.value = "@Question.QuestionTypes.FACES";
                        break;
                    case "@Question.QuestionTypes.STARS":
                            questionStarsPartial.style.display = 'block';
                            TypeNameHidden.value = "@Question.QuestionTypes.STARS"

                        break;
                    case "@Question.QuestionTypes.SLIDER":
                            questionSliderPartial.style.display = 'block';
                            TypeNameHidden.value = "@Question.QuestionTypes.SLIDER"

                        break;
                    default:
                }
            }
            ChangeSelectedView(questionType || "@Question.QuestionTypes.FACES");

            selectElement.addEventListener('change', function () {
                questionSliderPartial.style.display = 'none';
                questionFacesPartial.style.display = 'none';
                questionStarsPartial.style.display = 'none';
                var selectedValue = selectElement.value;
                ChangeSelectedView(selectedValue);

            });
            var initialSelectedValue = selectElement.value;
            selectElement.dispatchEvent(new Event('change'));
        });
    </script>
}


