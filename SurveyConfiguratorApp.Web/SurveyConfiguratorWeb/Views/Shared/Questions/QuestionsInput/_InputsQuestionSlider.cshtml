
@model SurveyConfiguratorApp.Domain.Questions.QuestionSlider
@using SurveyConfiguratorWeb.Languages
@using SurveyConfiguratorWeb.Models

<div class=" " dir="auto">
    <div class="col-12 w-100 my-2">

        <div class="input-group" dir="auto">
            <label for="@nameof(Model.StartValue)" class="input-group-text side-form-label">@Language.START_VALUE</label>
            @Html.TextBoxFor(model => model.StartValue, new { @class = "form-control", type = "number", min = "0", max = "99", id = "StartValue", onkeyup = "CheckSliderValue(this);", onkeydown = "CheckSliderValue(this);" })
        </div>
        @Html.ValidationMessageFor(model => model.StartValue, "", new { @class = "text-danger" })
        <small class="text-danger" id="errorLabelStartValue"></small>
    </div>

    <div class="col-12 my-2" dir="auto">
        <div class="input-group">
            <label for="@nameof(Model.EndValue)" class="input-group-text side-form-label">@Language.END_VALUE</label>
            @Html.TextBoxFor(model => model.EndValue, new { @class = "form-control", type = "number", min = "1", max = "100", value = "100", id = "EndValue" })

        </div>
        @Html.ValidationMessageFor(model => model.EndValue, "", new { @class = "text-danger" })
        <small class="text-danger" id="errorLabelEndValue"></small>

    </div>

    <div class="col-md-12 my-2">
        <div class="input-group" dir="auto">
            <label for="@nameof(Model.StartCaption)" class="input-group-text side-form-label">@Language.START_CAPTION</label>
            @Html.TextAreaFor(model => model.StartCaption, new { @class = "form-control", onkeydown = "CheckStartCaption(this);", onkeyup = "CheckStartCaption(this);" })

        </div>
        @Html.ValidationMessageFor(model => model.StartCaption, "", new { @class = "text-danger",id= "errorLabelStartCaptionBE" })
        <small class="text-danger" id="errorLabelStartCaption"></small>


    </div>
    <div class="col-md-12  my-2">
        <div class="input-group" dir="auto">
            <label for="@nameof(Model.EndCaption)" class="input-group-text side-form-label">@Language.END_CAPTION</label>
            @Html.TextAreaFor(model => model.EndCaption, new { @class = "form-control", onkeydown = "CheckEndCaption(this);", onkeyup = "CheckEndCaption(this);" })
        </div>
        @Html.ValidationMessageFor(model => model.EndCaption, "", new { @class = "text-danger",id= "errorLabelEndCaptionBE" })
        <small class="text-danger" id="errorLabelEndCaption"></small>

    </div>


    <div class="w-100 col-12 my-3">
        <input type="submit" value="@Language.SAVE" class="btn btn-primary col-12 text-center" />
    </div>
</div>
@section scripts{
    
    
    }
<script>


    function CheckSliderValue(inputStartValue) {
        try {
            isValidStartValueNumber = false;

            const StartValue = inputStartValue.value;

            const EndValue = document.getElementById("EndValue").value;

            const tErrorLabelStartValue = document.getElementById("errorLabelStartValue");
          //  const tErrorLabelEndValue = document.getElementById("errorLabelEndValue");
            if (isNaN(StartValue)) {
                tErrorLabelStartValue.innerHTML = "@Language.NOT_NUMBER";
                }
            let tStartValue = parseInt(StartValue);


            if (StartValue == null || StartValue.trim().length == 0) {
                tErrorLabelStartValue.innerHTML = "@Language.REQUIRED";
            }

            else if (tStartValue < SLIDER_MIN_VALUE) {
                tErrorLabelStartValue.innerHTML = "@Language.VALIDATION_ERROR_SLIDER_START_VALUE";

            }
            else if (tStartValue > EndValue) {
                tErrorLabelStartValue.innerHTML = "@Language.VALIDATION_ERROR_QUESTION_STARS"
            }
            else {
                isValidStartValueNumber = true;
                tErrorLabelStartValue.innerHTML = null
            }

            //handle border
            if (isValidStartValueNumber) {
                HandleBorderInput(input, true);
            }
            else {
                HandleBorderInput(input, false);
            }

        } catch (e) {

        }



    }
    function CheckSliderValue(captionInput) {
        try {
            HandleCaptionValidation(captionInput,"","")
        } catch (e) {
            console.error(e);
        }
    }

    function HandleCaptionValidation(captionInput,errorLabelId,errorLabelBEId) {
        try {
            let isValid = false;
           let captionText = captionInput.value.trim();
            errorLabel = document.getElementById(errorLabelId);
            errorLabelDB = document.getElementById(errorLabelBEId);
            if (captionText == null || captionText.length == 0) {
                errorLabel.innerHTML = "@Language.VALIDATION_ERROR_SLIDER_CAPTION";
            }
            else if (captionText.length < SLIDER_CAPTION_TEXT_LENGTH_MIN) {
                errorLabel.innerHTML = "@Language.STRING_LENGTH_SHORT";
            }
            else if (captionText.length > SLIDER_CAPTION_TEXT_LENGTH_MAX) {
                errorLabel.innerHTML = "@Language.STRING_LENGTH_LONG";
            }
            else {
                errorLabel.innerHTML = null;
                isValid = true;
            }


            //handle border
            if (isValid) {
                HandleBorderInput(captionInput, true);
            }
            else {
                HandleBorderInput(captionInput, false);
                errorLabelDB.style.display = "none";
            }
            return isValid;
        } catch (e) {
            console.error(e);
            return false;
        }
    }

    function CheckStartCaption(captionInput) {
        try {
            isValidStartCaption= HandleCaptionValidation(captionInput, "errorLabelStartCaption","errorLabelStartCaptionBE")
        } catch (e) {
            console.error(e);
        }
    }

    function CheckEndCaption(captionInput) {
        try {
            isValidEndCaption= HandleCaptionValidation(captionInput, "errorLabelEndCaption", "errorLabelEndCaptionBE")
        } catch (e) {
            console.error(e);
        }
    }
</script>