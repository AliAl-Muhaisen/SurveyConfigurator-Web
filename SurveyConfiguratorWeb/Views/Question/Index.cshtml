
@using SurveyConfiguratorApp.Domain.Questions
@using SurveyConfiguratorWeb.Models 
@model  List<Question>

@{
    ViewBag.Title = "Home Page";
}

@*@Html.Partial("Questions/_QuestionTable", Model)*@


<div class="row">

    <div id="tableQuestions" class="col-md-12 col-12 table-responsive">

    </div>
</div>




<!-- Modal -->
<div class="modal fade" id="deleteModel" data-bs-backdrop="static" tabindex="-1" data-bs-keyboard="false" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title " id="exampleModalLabel">Delete</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="modelText" class="d-block">
                    <p>
                        Are you sure you want to delete this question?
                    </p>

                </div>

                <div class="spinner-border text-primary d-none justify-content-center " role="status" id="loadSpinner">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btnConfirmDelete">Save changes</button>
            </div>
        </div>
    </div>
</div>


@section scripts {
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <script src="~/signalr/hubs"></script>

    <script>
        $(function () {
            // Connect to the SignalR hub
            var hub = $.connection.questionHub;

            // Define a client-side function to be called when the hub sends a notification
            hub.client.updateUI = function () {
                console.log('SignalR connection established.2222222');

                // Reload or update your web page here when the event occurs
                location.reload(); // For example, you can reload the page
            };

            // Start the connection
            $.connection.hub.start().done(function () {
                // hub.server.notifyClients();
                // You can do additional setup here if needed
                console.log('SignalR connection established.');
            });
        });
    </script>
    <script>

    const ColumnNames = ['Text', 'Type', 'Order', '  '];
        var questionList = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model));


    const CreateTable = () => {

        const div = document.getElementById('tableQuestions');
        const table = document.createElement("table");
        table.classList.add("table", "table-striped", "table-hover","my-3","w-100");
        div.classList.add("container")
        div.appendChild(table);
        CreateTableHeader(table);
        CreateTableBody(table);
    }


        const CreateTableHeader = (table) => {
            const thead = document.createElement('thead');
            const tr = document.createElement('tr');
            tr.classList.add("row");
            for (const columnName of ColumnNames) {
                const th = document.createElement('th');
                th.classList.add(columnName === 'Text' ? 'col-5' : 'col');
                th.classList.add("btn", "btn-default", "text-bold", "border");
                th.innerHTML = columnName;
                th.addEventListener('click', () => SortTable(columnName));
                tr.appendChild(th);
            }
            thead.appendChild(tr);
            table.appendChild(thead);
        }

        const CreateTableBody = (table) => {
            if (!table) {
                table = document.getElementsByTagName("table")[0];
            }
        let tbody = document.createElement("tbody");
        for (var questionIndex = 0; questionIndex < questionList.length; questionIndex++) {
            CreateTableRow(questionList[questionIndex], tbody);
        }
        table.appendChild(tbody);
    }

    const CreateTableRow= (question, tbody) => {
        let tr = document.createElement('tr');
        tr.classList.add("row");
        tr.id = question.Id;

        let tdText = document.createElement('td');
        tdText.classList.add('col-5');
        let tQuestionText = question.Text;
        if (tQuestionText.length > 30) {
            tQuestionText = tQuestionText.substr(0,27)+"..."
        }
        tdText.innerHTML = tQuestionText;
         tr.appendChild(tdText);



        let tdTypeNumber = document.createElement('td');
        tdTypeNumber.classList.add('col',"text-center");
        tdTypeNumber.innerHTML = question.TypeName;
        tr.appendChild(tdTypeNumber);


        let tdOrder = document.createElement('td');
        tdOrder.classList.add('col',"text-center");
        tdOrder.innerHTML = question.Order;
        tr.appendChild(tdOrder);


        CreateRecordOperation(tr, question.Id, question.TypeName);
        tbody.appendChild(tr);

    }

    document.addEventListener('DOMContentLoaded', CreateTable);


    const CreateRecordOperation = (parentTag, id,typeName) => {


        const classes = ["btn", "btn-link", "col-12","col-md-3","p-0","m-1","m-md-0"];
        let tdOps = document.createElement('td');
        tdOps.classList.add("row", "col");

        let updateTag = document.createElement('a');
        updateTag.classList.add(...classes);
        updateTag.innerHTML = "Edit";
        updateTag.href = '@Url.Action(Routes.EDIT, Routes.QUESTION)?id=' + id + '&type=' + typeName;

        let detailTag = document.createElement('a');
        detailTag.classList.add(...classes);
        detailTag.innerHTML = "Detail";
        detailTag.href = '@Url.Action(Routes.DETAIL, Routes.QUESTION)?id=' + id + '&type=' + typeName;

        let deleteTag = document.createElement('a');
        deleteTag.classList.add(...classes);
        deleteTag.innerHTML = "Delete";
        deleteTag.onclick = () => handelDeleteTableRow(id);

        tdOps.appendChild(deleteTag);
        tdOps.appendChild(updateTag);
        tdOps.appendChild(detailTag);
        parentTag.appendChild(tdOps);
    }


    const handelDeleteTableRow = async (questionId) => {


        const myModal = new bootstrap.Modal(document.getElementById('deleteModel'), {});
        myModal.show();

        const deleteButton = document.getElementById('btnConfirmDelete');
        deleteButton.addEventListener('click', async () => {
            toggleSpinnerModel(false);
            await deleteTableRow(questionId);
            toggleSpinnerModel(true);
            myModal.hide();

        });



    };
        const deleteTableRow = async (questionId) => {
            try {
                  const url = "/@Routes.QUESTION_DELETE";


        const data = { pID: questionId };

        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
        });

                const body = await response.json();
            if (body.success) {
                SuccessFlash("Delete Successfully")
                removeElementById(questionId);
                // Find the index of the question with the specified Id in the array
                const index = questionList.findIndex((question) => question.Id === questionId);

                // If the question with the specified Id is found, remove it from the array
                if (index !== -1) {
                    questionList.splice(index, 1);
                }
            }
            else {
                ErrorFlash("Delete Failed")
                }
            } catch (e) {
                ErrorFlash("Something went wrong (!_!)")

            }

    }

    function removeElementById(id) {
        const element = document.getElementById(id);
        if (element) {
            const parentElement = element.parentNode;
            parentElement.removeChild(element);
            }
        }
        const removeTableBody = () => {

            for (var index = 0; index < questionList.length; index++) {
                removeElementById(questionList[index].Id);
            }
            const tTbody = document.getElementsByTagName("tbody")[0];
            if (tTbody) {
                const parentElement = tTbody.parentNode;
                parentElement.removeChild(tTbody);
            }
        }
    function handleSaveChanges() {
        console.log('Save changes button clicked!');

        console.log(deleteButton);
    }



    const toggleSpinnerModel = (show = false) => {

        const modelText = document.getElementById("modelText");
        const modelSpinner = document.getElementById("loadSpinner");
        let dBlock = "d-block";
        let dNone = "d-none";
        if (!show) {

            dBlock = "d-none";
            dNone = "d-block";
        }

        modelSpinner.classList.replace(dBlock, dNone);
        modelText.classList.replace(dNone, dBlock);
    }



        //Sort
        let lastColumnName;
        const SortTable = (pColumnName) => {

            removeTableBody();
            switch (pColumnName) {
                case "Text":
                    questionList.sort((a, b) => a.Text.localeCompare(b.Text));
                    break;
                case "Type":
                    questionList.sort((a, b) => a.Text.localeCompare(b.Text));
                    break;
                case "Order":
                    questionList.sort(function (a, b) { return (a.Order - b.Order) });
                    break;
                default:
                    break;
            }
            if (pColumnName == lastColumnName) {
                questionList.reverse();
                lastColumnName = "";
            }
            else
             lastColumnName = pColumnName;
          
                CreateTableBody();
            
        }
    </script>

}
