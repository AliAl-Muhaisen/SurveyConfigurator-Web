
@using SurveyConfiguratorApp.Domain.Questions
@using SurveyConfiguratorApp.Domain
@using SurveyConfiguratorWeb.Models
@using SurveyConfiguratorWeb.Languages
@model  SurveyConfiguratorWeb.Models.QuestionModel

@{
    ViewBag.Title = "Home Page";
}



<div class="row">
    @{ if (Model.IsDbConnected == ResultCode.SUCCESS)
        {
                <div class="alert alert-warning my-3" role="alert" id="emptyTableWarning">
                    <h4 class="alert-heading">@Language.EMPTY_TABLE</h4>
                    <p>@Language.EMPTY_TABLE_MESSAGE</p>

                </div>
                <a class="btn btn-dark col-12 col-lg-2 col-md-4 mt-2" href="/@Routes.QUESTION_CRAETE"><i class="fa-solid fa-plus"></i> @Language.ADD </a>           }
            else
            {
                @Html.Partial(Routes.PATH_DB_CONNECTION_FAILED)
            }
        }
</div>
<div class="row">
   
    
    <div id="tableQuestions" class="col-md-12 col-12 ">

    </div>
</div>




<!-- Modal -->
<div class="modal fade" id="deleteModel" data-bs-backdrop="static" tabindex="-1" data-bs-keyboard="false" aria-labelledby="staticBackdropLabel" aria-hidden="true" dir="auto">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white" dir="auto">
                <h5 class="modal-title"  id="exampleModalLabel"> @Language.DELETE</h5>
                @*<button type="button"  class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>*@
            </div>
            <div class="modal-body">
                <div id="modelText" class="d-block">
                    <p>
                        @Language.DELETE_MESSAGE
                    </p>

                </div>

                <div class="spinner-border text-primary text-center align-content-center d-none justify-content-center " role="status" id="loadSpinner">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <div class="modal-footer" dir="auto">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"> @Language.CANCEL</button>
                <button type="button" class="btn btn-primary" id="btnConfirmDelete"> @Language.DELETE</button>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <script src="~/signalr/hubs"></script>

    <script>

        const ColumnNames = ['@Language.TEXT', '@Language.TYPE', '@Language.ORDER', '  '];
        var questionList = @Html.Raw(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.QuestionList));

        const HandleEmptyTable = () => {
            try {
                const tAlert = document.getElementById("emptyTableWarning");
                const tQuestionTable = document.getElementById("tableQuestions");
                
                if (questionList.length > 0) {
                    tAlert.style.display = "none";
                    tQuestionTable.style.display = "block";
                }
                else {
                    tAlert.style.display = "block";
                   tQuestionTable.style.display = "none";
                }
            } catch(e) {
                console.log(e);
            }
        }
        const HandleCreateTable = () => {
            try {
                HandleEmptyTable();
                if (questionList.length > 0) {
                    CreateTable();
                }
            } catch (e) {
                console.log(e);
            }


        }
        const CreateTable = () => {
            try {
                const div = document.getElementById('tableQuestions');
                const table = document.createElement("table");
                table.classList.add("table", "table-striped", "table-hover", "my-3", "w-100","border","shadow");
                table.id = "mainQuestionTable";
                div.classList.add("container");
                table.setAttribute("dir","auto")
                div.appendChild(table);
                CreateTableHeader(table);
                CreateTableBody(table);
            } catch (e) {
                console.log(e);
            }
    }


        const CreateTableHeader = (table) => {
            try {
                const thead = document.createElement('thead');
                const tr = document.createElement('tr');
                tr.classList.add("row");
                for (const columnName of ColumnNames) {
                    const th = document.createElement('th');
                    th.classList.add(columnName === '@Language.TEXT' ? 'col-5' : 'col');
                    if (columnName != '  ') {
                        th.classList.add("btn", "btn-default", "text-bold", "border");
                        th.addEventListener('click', () => SortTable(columnName));
                    }
                    th.innerHTML = columnName;

                       
                   
                  
                    tr.appendChild(th);
                }
                thead.appendChild(tr);
                table.appendChild(thead);
            } catch (e) {
                console.log(e);
            }

        }

        const CreateTableBody = (table, pQuestionList) => {
            try {
                HandleEmptyTable();
                if (!table) {
                    table = document.getElementsByTagName("table")[0];
                }
                if (!pQuestionList) {
                    pQuestionList = questionList;
                }
                let tbody = document.createElement("tbody");
                for (var questionIndex = 0; questionIndex < pQuestionList.length; questionIndex++) {
                    CreateTableRow(pQuestionList[questionIndex], tbody);
                }
                table.appendChild(tbody);
            } catch (e) {
                console.log(e);
            }

    }

        const CreateTableRow = (question, tbody) => {
            try {
                let tr = document.createElement('tr');
                tr.classList.add("row");
                tr.id = question.Id;

                let tdText = document.createElement('td');
                tdText.classList.add('col-5');
                let tQuestionText = question.Text;
                if (tQuestionText.length > 30) {
                    tQuestionText = tQuestionText.substr(0, 27) + "..."
                }
                tdText.innerHTML = tQuestionText;
                tr.appendChild(tdText);

             let tdTypeNumber = document.createElement('td');
                    tdTypeNumber.classList.add('col', "text-center");
                    switch (String(question.TypeName)) {
                        case "@Question.QuestionTypes.FACES.ToString()":
                            tdTypeNumber.innerHTML ="@Language.FACES"
                            break;
                        case "@Question.QuestionTypes.STARS.ToString()":
                            tdTypeNumber.innerHTML ="@Language.STARS"
                            break;
                        case "@Question.QuestionTypes.SLIDER.ToString()":
                            tdTypeNumber.innerHTML ="@Language.SLIDER"
                            break;
                        default:
                            break;

                }
                tr.appendChild(tdTypeNumber);


                let tdOrder = document.createElement('td');
                tdOrder.classList.add('col', "text-center");
                tdOrder.innerHTML = question.Order;
                tr.appendChild(tdOrder);


                CreateRecordOperation(tr, question.Id, question.TypeName);
                tbody.appendChild(tr);

            } catch (e) {
                console.log(e);
            }


    }



        document.addEventListener('DOMContentLoaded', HandleCreateTable);


    const CreateRecordOperation = (parentTag, id,typeName) => {

        try {
                const classes = ["btn", "btn-link", "col-12","col-md-3","p-0","m-1","m-md-0"];
                let tdOps = document.createElement('td');
                tdOps.classList.add("row", "col");

                let updateTag = document.createElement('a');
                updateTag.classList.add(...classes);
                updateTag.innerHTML = "@Language.EDIT";
                updateTag.href = '@Url.Action(Routes.EDIT, Routes.QUESTION)?id=' + id + '&type=' + typeName;

                let detailTag = document.createElement('a');
                detailTag.classList.add(...classes);
                detailTag.innerHTML = "@Language.DETAIL";
                detailTag.href = '@Url.Action(Routes.DETAIL, Routes.QUESTION)?id=' + id + '&type=' + typeName;

                let deleteTag = document.createElement('a');
                deleteTag.classList.add(...classes);
                deleteTag.innerHTML = "@Language.DELETE";
                deleteTag.onclick = () => handelDeleteTableRow(id);

                tdOps.appendChild(deleteTag);
                tdOps.appendChild(updateTag);
                tdOps.appendChild(detailTag);
                parentTag.appendChild(tdOps);
        } catch (e) {
            console.log(e);
        }

    }


        const handelDeleteTableRow = async (questionId) => {
            try {
                const myModal = new bootstrap.Modal(document.getElementById('deleteModel'), {});
                myModal.show();

                const deleteButton = document.getElementById('btnConfirmDelete');
                deleteButton.addEventListener('click', async () => {
                    toggleSpinnerModel(false);
                    await deleteTableRow(questionId);
                    toggleSpinnerModel(true);
                    myModal.hide();

                });

            } catch (e) {
                console.log(e);
            }

    };
        const deleteTableRow = async (questionId) => {
            try {
                  const url = "/@Routes.QUESTION_DELETE";


                const data = { pID: questionId };

                const response = await fetch(url, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(data),
                });

                const body = await response.json();
                if (body.Success) {
                            SuccessFlash("@Language.DELETE_SUCCESSFUL")
                        removeElementById(questionId);
                        // Find the index of the question with the specified Id in the array
                        const index = questionList.findIndex((question) => question.Id === questionId);

                        // If the question with the specified Id is found, remove it from the array
                        if (index !== -1) {
                            questionList.splice(index, 1);
                        }
                   }
                else {
                    ErrorFlash("@Language.DELETE_FAILED")
                }
            } catch (e) {
                ErrorFlash(" @Language.DB_FAILED_NERORK_CONNECTION")

            }

    }

        function removeElementById(id) {
            try {
                const element = document.getElementById(id);
                if (element) {
                    const parentElement = element.parentNode;
                    parentElement.removeChild(element);
                }
            } catch (e) {
                console.log(e);
            }

        }


        const removeTableBody = () => {
            try {
                for (var index = 0; index < questionList.length; index++) {
                    removeElementById(questionList[index].Id);
                }
                const tTbody = document.getElementsByTagName("tbody")[0];
                if (tTbody) {
                    const parentElement = tTbody.parentNode;
                    parentElement.removeChild(tTbody);
                }
            } catch (e) {
                console.log(e);
            }

        }
    function handleSaveChanges() {
        console.log('Save changes button clicked!');

        console.log(deleteButton);
    }



    const toggleSpinnerModel = (show = false) => {

        const modelText = document.getElementById("modelText");
        const modelSpinner = document.getElementById("loadSpinner");
        let dBlock = "d-block";
        let dNone = "d-none";
        if (!show) {

            dBlock = "d-none";
            dNone = "d-block";
        }

        modelSpinner.classList.replace(dBlock, dNone);
        modelText.classList.replace(dNone, dBlock);
    }



        //Sort
        let lastColumnName;
        const SortTable = (pColumnName) => {
            try {
                    removeTableBody();
                    switch (pColumnName) {
                        case "@Language.TEXT":
                            questionList.sort((a, b) => a.Text.localeCompare(b.Text));
                            break;
                        case "@Language.TYPE":
                            questionList.sort((a, b) => a.TypeName.localeCompare(b.TypeName));
                            break;
                        case "@Language.ORDER":
                            questionList.sort(function (a, b) { return (a.Order - b.Order) });
                            break;
                        default:
                            break;
                    }
                    if (pColumnName == lastColumnName) {
                        questionList.reverse();
                        lastColumnName = "";
                    }
                    else
                     lastColumnName = pColumnName;

                        CreateTableBody();
            } catch (e) {
                console.log(e);
            }


        }


        var hub = $.connection.questionHub;

        hub.client.refreshQuestionsClient = function (questionList) {
                removeTableBody();
            CreateTableBody(null,questionList);
            }
        $(function () {

            $.connection.hub.start(function () {
                console.log('SignalR connection established.');
            });
        });



    </script>

   

}
