@model SurveyConfiguratorApp.Logic.DbManager
@using SurveyConfiguratorWeb.Models
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "ConfigForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal py-4">
        <h4>Connection</h4>
        <hr />
        <div class="my-1">
            <label for="@nameof(Model.Server)">Server</label>
            @Html.TextBoxFor(model => model.Server, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Server, "", new { @class = "text-danger" })
        </div>


        <div class="my-1">

            <label for="@nameof(Model.Database)">Database</label>
            @Html.TextBoxFor(model => model.Database, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Database, "", new { @class = "text-danger" })
        </div>

        <div class="my-1">

            <label for="@nameof(Model.Username)">User Name</label>
            @Html.TextBoxFor(model => model.Username, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
        </div>

        <div class="my-1">

            <label for="@nameof(Model.Password)">Password</label>
            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @type = "password" })
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group d-flex">
            <div class="col-md-2 m-1">
                <input type="button" value="Save" class="btn btn-primary w-100" onclick="HandleSaveConnection()" />
            </div>
            <div class="col-md-2 m-1">
                <input type="reset" value="Reset" class="btn btn-danger w-100" />
            </div>
        </div>
    </div>
}


<!-- Modal -->
<div class="modal fade" id="ConfirmSave" data-bs-backdrop="static" tabindex="-1" data-bs-keyboard="false" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-white">
                <h5 class="modal-title " id="exampleModalLabel">Confirm</h5>
                <button type="button" class="btn-close text-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="modelText" class="d-block">
                    <p>
                        Connection failed, do you still want to save it?
                    </p>

                </div>

                <div class="spinner-border text-primary d-none justify-content-center " role="status" id="loadSpinner">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btnConfirmDelete" onclick="SaveConnection()">Save</button>
            </div>
        </div>
    </div>
</div>




@section scripts
{
    <script>
        const ConfirmModal = new bootstrap.Modal(document.getElementById('ConfirmSave'), {});

        const HandleSaveConnection = async () => {
            try {

                const tUrlTest = "/@Routes.DB_CONNECTION_TEST";
                var formData = new FormData(document.getElementById('ConfigForm'));
                ShowOverlay();
                const tResponse = await fetch(tUrlTest, {
                    method: "POST",
                    body: formData,
                })
                const tData = await tResponse.json();
               await HideOverlay();
                HandleFlashConnectionMsg(tData);

                console.log(tData);
                if (!tData?.Success) {
                    ConfirmModal.show();
                }
            } catch (e) {
                ErrorFlash("Something went wrong, Please try again later")
            }

        }

        const SaveConnection = async() => {
            try {
                ConfirmModal.hide();
                const tUrlSave = "/@Routes.DB_CONNECTION_CREATE";

                var formData = new FormData(document.getElementById('ConfigForm'));
                ShowOverlay();

                const tResponse = await fetch(tUrlSave, {
                    method: "POST",
                    body: formData,
                });

                const tData = await tResponse.json();
                HideOverlay()

                HandleFlashConnectionMsg(tData);
            } catch (e) {
                ErrorFlash("Something went wrong, Please try again later")

            }
        }

        const HandleFlashConnectionMsg = (data) => {
            if (data?.Success) {
                SuccessFlash("Save Successfully");
            }
            else if (!data?.Success) {
                ErrorFlash("Save Fialed");
            }
            else if (data?.Error){
                ErrorFlash("Something went wrong, Please try again later")
            }
        }
    </script>

}
